{"version":3,"file":"index.js","sources":["../../src/components/decoration3/index.js"],"sourcesContent":["import React, { useMemo, forwardRef } from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport classnames from 'classnames'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport useAutoResize from '../../use/autoResize'\n\nimport './style.less'\n\nconst defaultColor = ['#7acaec', 'transparent']\n\nconst pointSideLength = 7\n\nconst svgWH = [300, 35]\n\nconst rowNum = 2\n\nconst rowPoints = 25\n\nconst halfPointSideLength = pointSideLength / 2\n\nfunction getPoints() {\n  const [w, h] = svgWH\n\n  const horizontalGap = w / (rowPoints + 1)\n  const verticalGap = h / (rowNum + 1)\n\n  let points = new Array(rowNum)\n    .fill(0)\n    .map((foo, i) =>\n      new Array(rowPoints)\n        .fill(0)\n        .map((foo, j) => [horizontalGap * (j + 1), verticalGap * (i + 1)])\n    )\n\n  return points.reduce((all, item) => [...all, ...item], [])\n}\n\nconst Decoration = forwardRef(({ className, style, color = [] }, ref) => {\n  const { width, height, domRef } = useAutoResize(ref)\n\n  function calcSVGData() {\n    return {\n      points: getPoints(),\n      svgScale: [width / svgWH[0], height / svgWH[1]]\n    }\n  }\n\n  const mergedColor = useMemo(() => deepMerge(deepClone(defaultColor, true), color || []), [color])\n\n  const { svgScale, points } = useMemo(calcSVGData, [width, height])\n\n  const classNames = useMemo(() => classnames('dv-decoration-3', className), [\n    className\n  ])\n\n  return (\n    <div className={classNames} style={style} ref={domRef}>\n      <svg\n        width={`${svgWH[0]}px`}\n        height={`${svgWH[1]}px`}\n        style={{ transform: `scale(${svgScale[0]},${svgScale[1]})` }}\n      >\n        {points.map((point, i) => (\n          <rect\n            key={i}\n            fill={mergedColor[0]}\n            x={point[0] - halfPointSideLength}\n            y={point[1] - halfPointSideLength}\n            width={pointSideLength}\n            height={pointSideLength}\n          >\n            {Math.random() > 0.6 && (\n              <animate\n                attributeName='fill'\n                values={`${mergedColor.join(';')}`}\n                dur={Math.random() + 1 + 's'}\n                begin={Math.random() * 2}\n                repeatCount='indefinite'\n              />\n            )}\n          </rect>\n        ))}\n      </svg>\n    </div>\n  )\n})\n\nDecoration.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  color: PropTypes.array\n}\n\nexport default Decoration\n"],"names":["defaultColor","pointSideLength","svgWH","rowNum","rowPoints","halfPointSideLength","getPoints","w","h","horizontalGap","verticalGap","points","Array","fill","map","foo","i","j","reduce","all","item","Decoration","forwardRef","ref","className","style","color","useAutoResize","width","height","domRef","calcSVGData","svgScale","mergedColor","useMemo","deepMerge","deepClone","classNames","classnames","transform","point","Math","random","join","propTypes","PropTypes","string","object","array"],"mappings":"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"}