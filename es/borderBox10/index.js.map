{"version":3,"file":"index.js","sources":["../../src/components/borderBox10/index.js"],"sourcesContent":["import React, { useMemo, forwardRef } from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport classnames from 'classnames'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport useAutoResize from '../../use/autoResize'\n\nimport './style.less'\n\nconst border = ['left-top', 'right-top', 'left-bottom', 'right-bottom']\nconst defaultColor = ['#1d48c4', '#d3e1f8']\n\nconst BorderBox = forwardRef(({ children, className, style, color = [], backgroundColor = 'transparent' }, ref) => {\n  const { width, height, domRef } = useAutoResize(ref)\n\n  const mergedColor = useMemo(() => deepMerge(deepClone(defaultColor, true), color || []), [color])\n\n  const classNames = useMemo(() => classnames('dv-border-box-10', className), [\n    className\n  ])\n\n  const styles = useMemo(() => ({\n    boxShadow: `inset 0 0 25px 3px ${mergedColor[0]}`,\n    ...style\n  }), [style, mergedColor])\n\n  return (\n    <div className={classNames} style={styles} ref={domRef}>\n      <svg className='dv-border-svg-container' width={width} height={height}>\n        <polygon fill={backgroundColor} points={`\n          4, 0 ${width - 4}, 0 ${width}, 4 ${width}, ${height - 4} ${width - 4}, ${height}\n          4, ${height} 0, ${height - 4} 0, 4\n        `} />\n      </svg>\n\n      {border.map(borderName => (\n        <svg\n          width='150px'\n          height='150px'\n          key={borderName}\n          className={`${borderName} dv-border-svg-container`}\n        >\n          <polygon\n            fill={mergedColor[1]}\n            points='40, 0 5, 0 0, 5 0, 16 3, 19 3, 7 7, 3 35, 3'\n          />\n        </svg>\n      ))}\n      <div className='border-box-content'>{children}</div>\n    </div>\n  )\n})\n\nBorderBox.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  color: PropTypes.array,\n  backgroundColor: PropTypes.string\n}\n\nexport default BorderBox\n"],"names":["border","defaultColor","BorderBox","forwardRef","ref","children","className","style","color","backgroundColor","useAutoResize","width","height","domRef","mergedColor","useMemo","deepMerge","deepClone","classNames","classnames","styles","boxShadow","map","borderName","propTypes","PropTypes","node","string","object","array"],"mappings":";;;;;;;;;;;AAaA,IAAMA,SAAS,CAAC,UAAD,EAAa,WAAb,EAA0B,aAA1B,EAAyC,cAAzC,CAAf;AACA,IAAMC,eAAe,CAAC,SAAD,EAAY,SAAZ,CAArB;;AAEA,IAAMC,YAAYC,WAAW,gBAA8EC,GAA9E,EAAsF;AAAA,MAAnFC,QAAmF,QAAnFA,QAAmF;AAAA,MAAzEC,SAAyE,QAAzEA,SAAyE;AAAA,MAA9DC,KAA8D,QAA9DA,KAA8D;AAAA,wBAAvDC,KAAuD;AAAA,MAAvDA,KAAuD,8BAA/C,EAA+C;AAAA,kCAA3CC,eAA2C;AAAA,MAA3CA,eAA2C,wCAAzB,aAAyB;;AAAA,uBAC/EC,cAAcN,GAAd,CAD+E;AAAA,MACzGO,KADyG,kBACzGA,KADyG;AAAA,MAClGC,MADkG,kBAClGA,MADkG;AAAA,MAC1FC,MAD0F,kBAC1FA,MAD0F;;AAGjH,MAAMC,cAAcC,QAAQ;AAAA,WAAMC,OAAUC,OAAUhB,YAAV,EAAwB,IAAxB,CAAV,EAAyCO,SAAS,EAAlD,CAAN;AAAA,GAAR,EAAqE,CAACA,KAAD,CAArE,CAApB;;AAEA,MAAMU,aAAaH,QAAQ;AAAA,WAAMI,WAAW,kBAAX,EAA+Bb,SAA/B,CAAN;AAAA,GAAR,EAAyD,CAC1EA,SAD0E,CAAzD,CAAnB;;AAIA,MAAMc,SAASL,QAAQ;AAAA;AACrBM,yCAAiCP,YAAY,CAAZ;AADZ,OAElBP,KAFkB;AAAA,GAAR,EAGX,CAACA,KAAD,EAAQO,WAAR,CAHW,CAAf;;AAKA,SACE;AAAA;AAAA,MAAK,WAAWI,UAAhB,EAA4B,OAAOE,MAAnC,EAA2C,KAAKP,MAAhD;AACE;AAAA;AAAA,QAAK,WAAU,yBAAf,EAAyC,OAAOF,KAAhD,EAAuD,QAAQC,MAA/D;AACE,uCAAS,MAAMH,eAAf,EAAgC,+BACvBE,QAAQ,CADe,aACPA,KADO,YACKA,KADL,WACeC,SAAS,CADxB,WAC6BD,QAAQ,CADrC,WAC2CC,MAD3C,uBAEzBA,MAFyB,aAEZA,SAAS,CAFG,qBAAhC;AADF,KADF;AAQGZ,WAAOsB,GAAP,CAAW;AAAA,aACV;AAAA;AAAA;AACE,iBAAM,OADR;AAEE,kBAAO,OAFT;AAGE,eAAKC,UAHP;AAIE,qBAAcA,UAAd;AAJF;AAME;AACE,gBAAMT,YAAY,CAAZ,CADR;AAEE,kBAAO;AAFT;AANF,OADU;AAAA,KAAX,CARH;AAqBE;AAAA;AAAA,QAAK,WAAU,oBAAf;AAAqCT;AAArC;AArBF,GADF;AAyBD,CAvCiB,CAAlB;;AAyCAH,UAAUsB,SAAV,GAAsB;AACpBnB,YAAUoB,UAAUC,IADA;AAEpBpB,aAAWmB,UAAUE,MAFD;AAGpBpB,SAAOkB,UAAUG,MAHG;AAIpBpB,SAAOiB,UAAUI,KAJG;AAKpBpB,mBAAiBgB,UAAUE;AALP,CAAtB;;;;"}