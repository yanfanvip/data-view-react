{"version":3,"file":"index.js","sources":["../../src/components/waterLevelPond/index.js"],"sourcesContent":["import React, { useEffect, useRef, useMemo, useState } from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport classnames from 'classnames'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport CRender from '@jiaminghi/c-render'\n\nimport { co, uuid } from '../../util'\n\nimport './style.less'\n\nconst defaultConfig = {\n  /**\n   * @description Data\n   * @type {Array<Number>}\n   * @default data = []\n   * @example data = [60, 40]\n   */\n  data: [],\n  /**\n   * @description Shape of wanter level pond\n   * @type {String}\n   * @default shape = 'rect'\n   * @example shape = 'rect' | 'roundRect' | 'round'\n   */\n  shape: 'rect',\n  /**\n   * @description Water wave number\n   * @type {Number}\n   * @default waveNum = 3\n   */\n  waveNum: 3,\n  /**\n   * @description Water wave height (px)\n   * @type {Number}\n   * @default waveHeight = 40\n   */\n  waveHeight: 40,\n  /**\n   * @description Wave opacity\n   * @type {Number}\n   * @default waveOpacity = 0.4\n   */\n  waveOpacity: 0.4,\n  /**\n   * @description Colors (hex|rgb|rgba|color keywords)\n   * @type {Array<String>}\n   * @default colors = ['#00BAFF', '#3DE7C9']\n   * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n   */\n  colors: ['#3DE7C9', '#00BAFF'],\n  /**\n   * @description Formatter\n   * @type {String}\n   * @default formatter = '{value}%'\n   */\n  formatter: '{value}%'\n}\n\nfunction drawed({ shape: { points } }, { ctx, area }) {\n  const firstPoint = points[0]\n  const lastPoint = points.slice(-1)[0]\n\n  const h = area[1]\n\n  ctx.lineTo(lastPoint[0], h)\n  ctx.lineTo(firstPoint[0], h)\n\n  ctx.closePath()\n\n  ctx.fill()\n}\n\nfunction mergeOffset([x, y], [ox, oy]) {\n  return [x + ox, y + oy]\n}\n\nfunction calcSvgBorderGradient({ colors }) {\n  const colorNum = colors.length\n\n  const colorOffsetGap = 100 / (colorNum - 1)\n\n  return colors.map((c, i) => [colorOffsetGap * i, c])\n}\n\nfunction calcDetails({ data, formatter }) {\n  if (!data.length) {\n    return ''\n  }\n\n  const maxValue = Math.max(...data)\n\n  return formatter.replace('{value}', maxValue)\n}\n\nfunction getWaveShapes({ waveNum, waveHeight, data }, [w, h]) {\n  const pointsNum = waveNum * 4 + 4\n\n  const pointXGap = w / waveNum / 2\n\n  return data.map(v => {\n    let points = new Array(pointsNum).fill(0).map((foo, j) => {\n      const x = w - pointXGap * j\n\n      const startY = (1 - v / 100) * h\n\n      const y = j % 2 === 0 ? startY : startY - waveHeight\n\n      return [x, y]\n    })\n\n    points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\n\n    return { points }\n  })\n}\n\nfunction getWaveStyle({ colors, waveOpacity }, area) {\n  return {\n    gradientColor: colors,\n    gradientType: 'linear',\n    gradientParams: [0, 0, 0, area[1]],\n    gradientWith: 'fill',\n    opacity: waveOpacity,\n    translate: [0, 0]\n  }\n}\n\nfunction getWave(mergedConfig, renderer) {\n  const area = renderer.area\n  const shapes = getWaveShapes(mergedConfig, area)\n  const style = getWaveStyle(mergedConfig, area)\n\n  return shapes.map(shape =>\n    renderer.add({\n      name: 'smoothline',\n      animationFrame: 300,\n      shape,\n      style,\n      drawed\n    })\n  )\n}\n\nfunction * animationWave(waves, renderer) {\n  waves.forEach(graph => {\n    graph.attr('style', { translate: [0, 0] })\n\n    graph.animation(\n      'style',\n      {\n        translate: [renderer.area[0], 0]\n      },\n      true\n    )\n  })\n\n  yield renderer.launchAnimation()\n}\n\nconst WaterLevelPond = ({ config = {}, className, style }) => {\n  const [renderer, setRenderer] = useState(null)\n\n  const gradientId = useRef(`water-level-pond-${uuid()}`).current\n\n  const domRef = useRef(null)\n\n  const mergedConfig = useMemo(\n    () => deepMerge(deepClone(defaultConfig, true), config),\n    [config]\n  )\n\n  const svgBorderGradient = useMemo(() => calcSvgBorderGradient(mergedConfig), [\n    mergedConfig\n  ])\n\n  const details = useMemo(() => calcDetails(mergedConfig), [mergedConfig])\n\n  const radius = useMemo(() => {\n    const { shape } = mergedConfig\n\n    if (shape === 'round') return '50%'\n\n    if (shape === 'rect') return '0'\n\n    if (shape === 'roundRect') return '10px'\n\n    return '0'\n  }, [mergedConfig])\n\n  const shape = useMemo(() => {\n    const { shape } = mergedConfig\n\n    return shape || 'rect'\n  }, [mergedConfig])\n\n  useEffect(() => {\n    let innerRenderer = renderer\n\n    if (!renderer) {\n      innerRenderer = new CRender(domRef.current)\n\n      setRenderer(innerRenderer)\n    }\n\n    function * loop() {\n      yield new Promise(resolve => setTimeout(resolve, 30))\n\n      const wave = getWave(mergedConfig, innerRenderer)\n\n      while (true) {\n        yield * animationWave(wave, innerRenderer)\n\n        if (!innerRenderer.graphs.length) return\n      }\n    }\n\n    const { end } = co(loop)\n\n    return () => {\n      innerRenderer.delAllGraph()\n\n      // 处理 renderer.launchAnimation 返回 undefined，导致长时间占用主线程（待 cender 下版本，处理后删除下面代码）\n      innerRenderer.graphs.forEach(_ => _.pauseAnimation())\n      innerRenderer.animationStatus = false\n\n      end()\n    }\n  }, [mergedConfig])\n\n  const classNames = useMemo(\n    () => classnames('dv-water-pond-level', className),\n    [className]\n  )\n\n  return (\n    <div className={classNames} style={style}>\n      {!!renderer && (\n        <svg>\n          <defs>\n            <linearGradient id={gradientId} x1='0%' y1='0%' x2='0%' y2='100%'>\n              {svgBorderGradient.map(lc => (\n                <stop key={lc[0]} offset={lc[0]} stopColor={lc[1]} />\n              ))}\n            </linearGradient>\n          </defs>\n\n          <text\n            stroke={`url(#${gradientId})`}\n            fill={`url(#${gradientId})`}\n            x={renderer.area[0] / 2 + 8}\n            y={renderer.area[1] / 2 + 8}\n          >\n            {details}\n          </text>\n\n          {!shape || shape === 'round' ? (\n            <ellipse\n              cx={renderer.area[0] / 2 + 8}\n              cy={renderer.area[1] / 2 + 8}\n              rx={renderer.area[0] / 2 + 5}\n              ry={renderer.area[1] / 2 + 5}\n              stroke={`url(#${gradientId})`}\n            />\n          ) : (\n            <rect\n              x='2'\n              y='2'\n              rx={shape === 'roundRect' ? 10 : 0}\n              ry={shape === 'roundRect' ? 10 : 0}\n              width={renderer.area[0] + 12}\n              height={renderer.area[1] + 12}\n              stroke={`url(#${gradientId})`}\n            />\n          )}\n        </svg>\n      )}\n\n      <canvas ref={domRef} style={{ borderRadius: `${radius}` }} />\n    </div>\n  )\n}\n\nWaterLevelPond.propTypes = {\n  config: PropTypes.object,\n  className: PropTypes.string,\n  style: PropTypes.object\n}\n\nexport default WaterLevelPond\n"],"names":["animationWave","defaultConfig","data","shape","waveNum","waveHeight","waveOpacity","colors","formatter","drawed","points","ctx","area","firstPoint","lastPoint","slice","h","lineTo","closePath","fill","mergeOffset","x","y","ox","oy","calcSvgBorderGradient","colorNum","length","colorOffsetGap","map","c","i","calcDetails","maxValue","Math","max","replace","getWaveShapes","w","pointsNum","pointXGap","Array","foo","j","startY","v","p","getWaveStyle","gradientColor","gradientType","gradientParams","gradientWith","opacity","translate","getWave","mergedConfig","renderer","shapes","style","add","name","animationFrame","waves","forEach","graph","attr","animation","launchAnimation","WaterLevelPond","config","className","useState","setRenderer","gradientId","useRef","uuid","current","domRef","useMemo","deepMerge","deepClone","svgBorderGradient","details","radius","useEffect","loop","innerRenderer","CRender","Promise","setTimeout","resolve","wave","graphs","co","end","delAllGraph","_","pauseAnimation","animationStatus","classNames","classnames","lc","borderRadius","propTypes","PropTypes","object","string"],"mappings":"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"}