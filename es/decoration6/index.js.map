{"version":3,"file":"index.js","sources":["../../src/components/decoration6/index.js"],"sourcesContent":["import React, { useMemo, forwardRef } from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport classnames from 'classnames'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport useAutoResize from '../../use/autoResize'\n\nimport { randomExtend } from '../../util'\n\nimport './style.less'\n\nconst defaultColor = ['#7acaec', '#7acaec']\n\nconst svgWH = [300, 35]\n\nconst rowNum = 1\nconst rowPoints = 40\n\nconst rectWidth = 7\nconst halfRectWidth = rectWidth / 2\n\nfunction getPoints() {\n  const [w, h] = svgWH\n\n  const horizontalGap = w / (rowPoints + 1)\n  const verticalGap = h / (rowNum + 1)\n\n  let points = new Array(rowNum)\n    .fill(0)\n    .map((foo, i) =>\n      new Array(rowPoints)\n        .fill(0)\n        .map((foo, j) => [horizontalGap * (j + 1), verticalGap * (i + 1)])\n    )\n\n  return points.reduce((all, item) => [...all, ...item], [])\n}\n\nfunction getData() {\n  const [, h] = svgWH\n\n  const heights = new Array(rowNum * rowPoints)\n    .fill(0)\n    .map(foo =>\n      Math.random() > 0.8\n        ? randomExtend(0.7 * h, h)\n        : randomExtend(0.2 * h, 0.5 * h)\n    )\n\n  const minHeights = new Array(rowNum * rowPoints)\n    .fill(0)\n    .map((foo, i) => heights[i] * Math.random())\n\n  const randoms = new Array(rowNum * rowPoints)\n    .fill(0)\n    .map(foo => Math.random() + 1.5)\n\n  return { heights, minHeights, randoms }\n}\n\nconst Decoration = forwardRef(({ className, style, color = [] }, ref) => {\n  const { width, height, domRef } = useAutoResize(ref)\n\n  function calcSVGData() {\n    return {\n      ...getData(),\n      points: getPoints(),\n      svgScale: [width / svgWH[0], height / svgWH[1]]\n    }\n  }\n\n  const mergedColor = useMemo(() => deepMerge(deepClone(defaultColor, true), color || []), [color])\n\n  const { points, heights, minHeights, randoms, svgScale } = useMemo(\n    calcSVGData,\n    [width, height]\n  )\n\n  const classNames = useMemo(() => classnames('dv-decoration-6', className), [\n    [className]\n  ])\n\n  return (\n    <div className={classNames} style={style} ref={domRef}>\n      <svg\n        width={`${svgWH[0]}px`}\n        height={`${svgWH[1]}px`}\n        style={{ transform: `scale(${svgScale[0]},${svgScale[1]})` }}\n      >\n        {points.map((point, i) => (\n          <rect\n            key={i}\n            fill={mergedColor[Math.random() > 0.5 ? 0 : 1]}\n            x={point[0] - halfRectWidth}\n            y={point[1] - heights[i] / 2}\n            width={rectWidth}\n            height={heights[i]}\n          >\n            <animate\n              attributeName='y'\n              values={`${point[1] - minHeights[i] / 2};${point[1] -\n                heights[i] / 2};${point[1] - minHeights[i] / 2}`}\n              dur={`${randoms[i]}s`}\n              keyTimes='0;0.5;1'\n              calcMode='spline'\n              keySplines='0.42,0,0.58,1;0.42,0,0.58,1'\n              begin='0s'\n              repeatCount='indefinite'\n            />\n            <animate\n              attributeName='height'\n              values={`${minHeights[i]};${heights[i]};${minHeights[i]}`}\n              dur={`${randoms[i]}s`}\n              keyTimes='0;0.5;1'\n              calcMode='spline'\n              keySplines='0.42,0,0.58,1;0.42,0,0.58,1'\n              begin='0s'\n              repeatCount='indefinite'\n            />\n          </rect>\n        ))}\n      </svg>\n    </div>\n  )\n})\n\nDecoration.propTypes = {\n  className: PropTypes.string,\n  style: PropTypes.object,\n  color: PropTypes.array\n}\n\nexport default Decoration\n"],"names":["defaultColor","svgWH","rowNum","rowPoints","rectWidth","halfRectWidth","getPoints","w","h","horizontalGap","verticalGap","points","Array","fill","map","foo","i","j","reduce","all","item","getData","heights","Math","random","randomExtend","minHeights","randoms","Decoration","forwardRef","ref","className","style","color","useAutoResize","width","height","domRef","calcSVGData","svgScale","mergedColor","useMemo","deepMerge","deepClone","classNames","classnames","transform","point","propTypes","PropTypes","string","object","array"],"mappings":";;;;;;;;;;;AAgBA,IAAMA,eAAe,CAAC,SAAD,EAAY,SAAZ,CAArB;;AAEA,IAAMC,QAAQ,CAAC,GAAD,EAAM,EAAN,CAAd;;AAEA,IAAMC,SAAS,CAAf;AACA,IAAMC,YAAY,EAAlB;;AAEA,IAAMC,YAAY,CAAlB;AACA,IAAMC,gBAAgBD,YAAY,CAAlC;;AAEA,SAASE,SAAT,GAAqB;AAAA,MACZC,CADY,GACJN,KADI;AAAA,MACTO,CADS,GACJP,KADI;;;AAGnB,MAAMQ,gBAAgBF,KAAKJ,YAAY,CAAjB,CAAtB;AACA,MAAMO,cAAcF,KAAKN,SAAS,CAAd,CAApB;;AAEA,MAAIS,SAAS,IAAIC,KAAJ,CAAUV,MAAV,EACVW,IADU,CACL,CADK,EAEVC,GAFU,CAEN,UAACC,GAAD,EAAMC,CAAN;AAAA,WACH,IAAIJ,KAAJ,CAAUT,SAAV,EACGU,IADH,CACQ,CADR,EAEGC,GAFH,CAEO,UAACC,GAAD,EAAME,CAAN;AAAA,aAAY,CAACR,iBAAiBQ,IAAI,CAArB,CAAD,EAA0BP,eAAeM,IAAI,CAAnB,CAA1B,CAAZ;AAAA,KAFP,CADG;AAAA,GAFM,CAAb;;AAQA,SAAOL,OAAOO,MAAP,CAAc,UAACC,GAAD,EAAMC,IAAN;AAAA,uCAAmBD,GAAnB,qBAA2BC,IAA3B;AAAA,GAAd,EAAgD,EAAhD,CAAP;AACD;;AAED,SAASC,OAAT,GAAmB;AAAA,MACRb,CADQ,GACHP,KADG;;;AAGjB,MAAMqB,UAAU,IAAIV,KAAJ,CAAUV,SAASC,SAAnB,EACbU,IADa,CACR,CADQ,EAEbC,GAFa,CAET;AAAA,WACHS,KAAKC,MAAL,KAAgB,GAAhB,GACIC,aAAa,MAAMjB,CAAnB,EAAsBA,CAAtB,CADJ,GAEIiB,aAAa,MAAMjB,CAAnB,EAAsB,MAAMA,CAA5B,CAHD;AAAA,GAFS,CAAhB;;AAQA,MAAMkB,aAAa,IAAId,KAAJ,CAAUV,SAASC,SAAnB,EAChBU,IADgB,CACX,CADW,EAEhBC,GAFgB,CAEZ,UAACC,GAAD,EAAMC,CAAN;AAAA,WAAYM,QAAQN,CAAR,IAAaO,KAAKC,MAAL,EAAzB;AAAA,GAFY,CAAnB;;AAIA,MAAMG,UAAU,IAAIf,KAAJ,CAAUV,SAASC,SAAnB,EACbU,IADa,CACR,CADQ,EAEbC,GAFa,CAET;AAAA,WAAOS,KAAKC,MAAL,KAAgB,GAAvB;AAAA,GAFS,CAAhB;;AAIA,SAAO,EAAEF,gBAAF,EAAWI,sBAAX,EAAuBC,gBAAvB,EAAP;AACD;;AAED,IAAMC,aAAaC,WAAW,gBAAmCC,GAAnC,EAA2C;AAAA,MAAxCC,SAAwC,QAAxCA,SAAwC;AAAA,MAA7BC,KAA6B,QAA7BA,KAA6B;AAAA,wBAAtBC,KAAsB;AAAA,MAAtBA,KAAsB,8BAAd,EAAc;;AAAA,uBACrCC,cAAcJ,GAAd,CADqC;AAAA,MAC/DK,KAD+D,kBAC/DA,KAD+D;AAAA,MACxDC,MADwD,kBACxDA,MADwD;AAAA,MAChDC,MADgD,kBAChDA,MADgD;;AAGvE,WAASC,WAAT,GAAuB;AACrB,wBACKjB,SADL;AAEEV,cAAQL,WAFV;AAGEiC,gBAAU,CAACJ,QAAQlC,MAAM,CAAN,CAAT,EAAmBmC,SAASnC,MAAM,CAAN,CAA5B;AAHZ;AAKD;;AAED,MAAMuC,cAAcC,QAAQ;AAAA,WAAMC,OAAUC,OAAU3C,YAAV,EAAwB,IAAxB,CAAV,EAAyCiC,SAAS,EAAlD,CAAN;AAAA,GAAR,EAAqE,CAACA,KAAD,CAArE,CAApB;;AAXuE,iBAaZQ,QACzDH,WADyD,EAEzD,CAACH,KAAD,EAAQC,MAAR,CAFyD,CAbY;AAAA,MAa/DzB,MAb+D,YAa/DA,MAb+D;AAAA,MAavDW,OAbuD,YAavDA,OAbuD;AAAA,MAa9CI,UAb8C,YAa9CA,UAb8C;AAAA,MAalCC,OAbkC,YAalCA,OAbkC;AAAA,MAazBY,QAbyB,YAazBA,QAbyB;;AAkBvE,MAAMK,aAAaH,QAAQ;AAAA,WAAMI,WAAW,iBAAX,EAA8Bd,SAA9B,CAAN;AAAA,GAAR,EAAwD,CACzE,CAACA,SAAD,CADyE,CAAxD,CAAnB;;AAIA,SACE;AAAA;AAAA,MAAK,WAAWa,UAAhB,EAA4B,OAAOZ,KAAnC,EAA0C,KAAKK,MAA/C;AACE;AAAA;AAAA;AACE,eAAUpC,MAAM,CAAN,CAAV,OADF;AAEE,gBAAWA,MAAM,CAAN,CAAX,OAFF;AAGE,eAAO,EAAE6C,sBAAoBP,SAAS,CAAT,CAApB,SAAmCA,SAAS,CAAT,CAAnC,MAAF;AAHT;AAKG5B,aAAOG,GAAP,CAAW,UAACiC,KAAD,EAAQ/B,CAAR;AAAA,eACV;AAAA;AAAA;AACE,iBAAKA,CADP;AAEE,kBAAMwB,YAAYjB,KAAKC,MAAL,KAAgB,GAAhB,GAAsB,CAAtB,GAA0B,CAAtC,CAFR;AAGE,eAAGuB,MAAM,CAAN,IAAW1C,aAHhB;AAIE,eAAG0C,MAAM,CAAN,IAAWzB,QAAQN,CAAR,IAAa,CAJ7B;AAKE,mBAAOZ,SALT;AAME,oBAAQkB,QAAQN,CAAR;AANV;AAQE;AACE,2BAAc,GADhB;AAEE,oBAAW+B,MAAM,CAAN,IAAWrB,WAAWV,CAAX,IAAgB,CAAtC,UAA2C+B,MAAM,CAAN,IACzCzB,QAAQN,CAAR,IAAa,CADf,WACoB+B,MAAM,CAAN,IAAWrB,WAAWV,CAAX,IAAgB,CAD/C,CAFF;AAIE,iBAAQW,QAAQX,CAAR,CAAR,MAJF;AAKE,sBAAS,SALX;AAME,sBAAS,QANX;AAOE,wBAAW,6BAPb;AAQE,mBAAM,IARR;AASE,yBAAY;AATd,YARF;AAmBE;AACE,2BAAc,QADhB;AAEE,oBAAWU,WAAWV,CAAX,CAAX,SAA4BM,QAAQN,CAAR,CAA5B,SAA0CU,WAAWV,CAAX,CAF5C;AAGE,iBAAQW,QAAQX,CAAR,CAAR,MAHF;AAIE,sBAAS,SAJX;AAKE,sBAAS,QALX;AAME,wBAAW,6BANb;AAOE,mBAAM,IAPR;AAQE,yBAAY;AARd;AAnBF,SADU;AAAA,OAAX;AALH;AADF,GADF;AA0CD,CAhEkB,CAAnB;;AAkEAY,WAAWoB,SAAX,GAAuB;AACrBjB,aAAWkB,UAAUC,MADA;AAErBlB,SAAOiB,UAAUE,MAFI;AAGrBlB,SAAOgB,UAAUG;AAHI,CAAvB;;;;"}